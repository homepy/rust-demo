/// 通过 Deref trait 将智能指针当作常规引用处理
///
/// Deref trait 重载不可变引用的 * 运算符，DerefMut trait 重载可变引用的 * 运算符

fn main() {
    {
        let x = 5;
        let y = &x;

        assert_eq!(5, x);
        assert_eq!(5, *y);
    }
    {
        // 实现 Deref trait 允许我们重载 解引用运算符（dereference operator）*  。
        let x = 5;
        let y = Box::new(x);

        assert_eq!(5, x);
        //Box<T> 实现了 Deref trait，所以以下直接 *y
        assert_eq!(5, *y);
    }

    {
        // 自定义智能指针MyBox
        let x = 5;
        let y = MyBox::new(x);

        assert_eq!(5, x);
        assert_eq!(5, *y);
        // *y 在Rust底层实际上是 *(y.deref())
    }

    {
        // 函数和方法的隐式 Deref 强制转换
        let m = MyBox::new(String::from("Rust"));
        hello(&m); // 等价于 hello(&(*m)[..]);
                   // &m 为 &MyBox<String>
                   // MyBox<T> 上实现了 Deref trait，Rust 可以通过 deref 调用将 &MyBox<String> 变为 &String
                   // 标准库中提供了 String 上的 Deref 实现，其会返回字符串 slice， Rust 再次调用 deref 将 &String 变为 &str
    }
}
// 自定义智能指针MyBox
struct MyBox<T>(T);

impl<T> MyBox<T> {
    fn new(x: T) -> MyBox<T> {
        MyBox(x)
    }
}

use std::ops::Deref;

impl<T> Deref for MyBox<T> {
    type Target = T;

    fn deref(&self) -> &Self::Target {
        &self.0
    }
}

fn hello(name: &str) {
    println!("Hello, {name}!");
}
